var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var ImageResizer = /** @class */ (function (_super) {
    __extends(ImageResizer, _super);
    function ImageResizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageResizer.prototype.resize = function (options) { return cordova(this, "resize", {}, arguments); };
    ImageResizer.pluginName = "ImageResizer";
    ImageResizer.plugin = "info.protonet.imageresizer";
    ImageResizer.pluginRef = "ImageResizer";
    ImageResizer.repo = "https://github.com/JoschkaSchulz/cordova-plugin-image-resizer";
    ImageResizer.platforms = ["Android", "iOS", "Windows"];
    ImageResizer = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ImageResizer);
    return ImageResizer;
}(IonicNativePlugin));
export { ImageResizer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ltYWdlLXJlc2l6ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBbUZ0QyxnQ0FBaUI7Ozs7SUFLakQsNkJBQU0sYUFBQyxPQUE0Qjs7Ozs7O0lBTHhCLFlBQVk7UUFIeEIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLFlBQVk7dUJBcEZ6QjtFQW9Ga0MsaUJBQWlCO1NBQXRDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBJbWFnZVJlc2l6ZXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBVUkkgZm9yIHRoZSBpbWFnZSBvbiB0aGUgZGV2aWNlIHRvIGdldCBzY2FsZWRcbiAgICovXG4gIHVyaTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZm9sZGVyIHRoZSBpbWFnZSBzaG91bGQgYmUgcHV0XG4gICAqIChBbmRyb2lkIG9ubHkpXG4gICAqL1xuICBmb2xkZXJOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIGN1c3RvbSBuYW1lIGZvciB0aGUgZmlsZS4gRGVmYXVsdCBuYW1lIGlzIGEgdGltZXN0YW1wLiBZb3UgaGF2ZSB0byBzZXQgdGhpcyB2YWx1ZSBvbiBpT1NcbiAgICovXG4gIGZpbGVOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKlxuICAgKiBRdWFsaXR5IGdpdmVuIGFzIE51bWJlciBmb3IgdGhlIHF1YWxpdHkgb2YgdGhlIG5ldyBpbWFnZVxuICAgKiAoQW5kcm9pZCBhbmQgaU9TIG9ubHkpXG4gICAqL1xuICBxdWFsaXR5PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIG5ldyBpbWFnZVxuICAgKi9cbiAgd2lkdGg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiB0aGUgbmV3IGltYWdlXG4gICAqL1xuICBoZWlnaHQ6IG51bWJlcjtcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gcmV0dXJuIGEgYmFzZTY0IGVuY29kZWQgaW1hZ2Ugc3RyaW5nIGluc3RlYWQgb2YgdGhlIHBhdGggdG8gdGhlIHJlc2l6ZWQgaW1hZ2UuXG4gICAqIGlPUyBvbmx5XG4gICAqL1xuICBiYXNlNjQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIEltYWdlIFJlc2l6ZXJcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBQbHVnaW4gRm9yIEltYWdlIFJlc2l6ZVxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSW1hZ2VSZXNpemVyLCBJbWFnZVJlc2l6ZXJPcHRpb25zIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9pbWFnZS1yZXNpemVyL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpbWFnZVJlc2l6ZXI6IEltYWdlUmVzaXplcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogbGV0IG9wdGlvbnMgPSB7XG4gKiAgdXJpOiB1cmksXG4gKiAgZm9sZGVyTmFtZTogJ1Byb3RvbmV0JyxcbiAqICBxdWFsaXR5OiA5MCxcbiAqICB3aWR0aDogMTI4MCxcbiAqICBoZWlnaHQ6IDEyODBcbiAqIH0gYXMgSW1hZ2VSZXNpemVyT3B0aW9ucztcbiAqXG4gKiB0aGlzLmltYWdlUmVzaXplclxuICogICAucmVzaXplKG9wdGlvbnMpXG4gKiAgIC50aGVuKChmaWxlUGF0aDogc3RyaW5nKSA9PiBjb25zb2xlLmxvZygnRmlsZVBhdGgnLCBmaWxlUGF0aCkpXG4gKiAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKGUpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBJbWFnZVJlc2l6ZXJPcHRpb25zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnSW1hZ2VSZXNpemVyJyxcbiAgcGx1Z2luOiAnaW5mby5wcm90b25ldC5pbWFnZXJlc2l6ZXInLFxuICBwbHVnaW5SZWY6ICdJbWFnZVJlc2l6ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0pvc2Noa2FTY2h1bHovY29yZG92YS1wbHVnaW4taW1hZ2UtcmVzaXplcicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzJ11cbn0pXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBJbWFnZVJlc2l6ZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZXNpemUob3B0aW9uczogSW1hZ2VSZXNpemVyT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=